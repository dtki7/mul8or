Some Byte in String Functions
  Returns the current value on the EAX register

  int eax = ((int(*)())("\xc3 <- This returns the value of the EAX register"))();
  Write a swap function

  int a = 10, b = 20;
  ((void(*)(int*,int*))"\x8b\x44\x24\x04\x8b\x5c\x24\x08\x8b\x00\x8b\x1b\x31\xc3\x31\xd8\x31\xc3\x8b\x4c\x24\x04\x89\x01\x8b\x4c\x24\x08\x89\x19\xc3 <- This swaps the values of a and b")(&a,&b);
  Write a for-loop counter to 1000, calling some function each time

  ((int(*)())"\x66\x31\xc0\x8b\x5c\x24\x04\x66\x40\x50\xff\xd3\x58\x66\x3d\xe8\x03\x75\xf4\xc3")(&function); // calls function with 1->1000
  You can even write a recursive function that counts to 100

  const char* lol = "\x8b\x5c\x24\x4\x3d\xe8\x3\x0\x0\x7e\x2\x31\xc0\x83\xf8\x64\x7d\x6\x40\x53\xff\xd3\x5b\xc3\xc3 <- Recursively calls the function at address lol.";
  i = ((int(*)())(lol))(lol);

Other way to execute Strings
  /* copy code to executable buffer */
  buf = mmap(0,sizeof(code),PROT_READ|PROT_WRITE|PROT_EXEC,
              MAP_PRIVATE|MAP_ANONYMOUS,-1,0);
  memcpy(buf, code, sizeof(code));
  /* run code */
  ((void (*) (void))buf)();

read register:
  handle for register
    register int rax asm("rax");
  value from register
    unsigned char out;
    asm volatile("movb %%al, %[Var]" : [Var] "=r" (out));
  Or:
    unsigned char out;
    asm volatile("movb %%al, %0" : "=r" (out));
  Or:
    int eax = ((int(*)())("\xc3 <- This returns the value of the EAX register"))();

    char code[] = "\x48\x31\xc0";
    int main(int argc, const char* argv[])
    {
      /*
            mov rax, 60          ; sys_exit
            mov rdi, 2
            syscall
      */
      char code[] = {
          0x48, 0xb8, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x48, 0xbf, 0x02, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0xc3
      };

      void *buf;

      /* copy code to executable buffer */
      buf = mmap(0,sizeof(code),PROT_READ|PROT_WRITE|PROT_EXEC,
                  MAP_PRIVATE|MAP_ANONYMOUS,-1,0);
      memcpy(buf, code, sizeof(code));

      /* run code */
      ((void (*) (void))buf)();
      ((void(*)(void))("\x48\xb8\x3c\x00\x00\x00\x00\x00\x00\x00\x48\xbf\x02\x00\x00\x00\x00\x00\x00\x00\xc3"))();

      register int rax asm("%rax");

      return rax;
    }

constraint "=rm" for "register or memory" (compiler decides)

/proc/pid/mem -- read mem  // not able to read vvar

pushfd - bit 16-17 cleared

gdb/mi? -> nicht verstanden -> popen() mit gdb benutzen


// printf("%#x\n", c[0]);  // cout ??
// unsigned char tst[] = {0xb8, 0x79, 0x56, 0x34, 0x12, 0xd9, 0xeb}; // into eax
// unsigned char tst[] = {0xd9, 0xeb}; // load pi onto st stack
// unsigned char tst[] = {0x90}; // nop
// unsigned char tst[] = {0x60}; // push all gpr's onto stack
// unsigned char tst[] = {
//   0x83, 0xec, 0x10,                         // sub    $0x10,%esp
//   0xc7, 0x45, 0xf0, 0x79, 0x56, 0x34, 0x12,	// movl   $0x12345679,-0x10(%ebp)
//   0xc7, 0x45, 0xf4, 0x00, 0x00, 0x00, 0x00, // movl   $0x0,-0xc(%ebp)
//   0xc7, 0x45, 0xf8, 0x66, 0x66, 0x00, 0x00, // movl   $0x6666,-0x8(%ebp)
//   0xc7, 0x45, 0xfc, 0x00, 0x00, 0x00, 0x00, // movl   $0x0,-0x4(%ebp)
//   0xc5, 0xfa, 0x6f, 0x45, 0xf0              // vmovdqu %xmm1,-0x10(%ebp)
// };

unsigned char instr[] = {
  0x83, 0xec, 0x20,             	// sub    $0x20,%esp
  0xc7, 0x45, 0xe0, 0x3f, 0x23, 0x82, 0x64, 	// movl   $0x6482233f,-0x20(%ebp)
  0xc7, 0x45, 0xe4, 0x05, 0x00, 0x00, 0x00, 	// movl   $0x5,-0x1c(%ebp)
  0xc7, 0x45, 0xe8, 0xff, 0xff, 0xff, 0xff, 	// movl   $0xffffffff,-0x18(%ebp)
  0xc7, 0x45, 0xec, 0xff, 0xff, 0xff, 0xff, 	// movl   $0xffffffff,-0x14(%ebp)
  0xc7, 0x45, 0xf0, 0x33, 0x33, 0x33, 0x33, 	// movl   $0x33333333,-0x10(%ebp)
  0xc7, 0x45, 0xf4, 0x00, 0x00, 0x00, 0x00, 	// movl   $0x0,-0xc(%ebp)
  0xc7, 0x45, 0xf8, 0x44, 0x44, 0x44, 0x44, 	// movl   $0x44444444,-0x8(%ebp)
  0xc7, 0x45, 0xfc, 0x00, 0x00, 0x00, 0x00, 	// movl   $0x0,-0x4(%ebp)
  0xc5, 0xfe, 0x6f, 0x4d, 0xe0       	// vmovdqu -0x20(%ebp),%ymm1

};
